PackageTool examines a directory recursively for files and subdirectories, and creates a package file. The package file can be added to the [Resources resource cache] and used as if the files were on a (read-only) filesystem.

Usage:

{{{
PackageTool <directory to process> <package name> [basepath]
}}}

When PackageTool runs, it will go inside the source directory, then look for subdirectories and any files. Paths inside the package will by default be relative to the source directory, but if an extra path prefix is desired, it can be specified by the optional basepath argument.

For example, this would convert all the resource files inside the Urho3D Data directory into a package called Data.pak (execute the command from the Bin directory)

{{{
PackageTool Data Data.pak
}}}

Afterwards, the package would be taken into use in the following way, and the actual Data directory would no longer be required. Note that the order of operations is important here, because the [Engine] initialization already needs various default resources, and if not found, exceptions will result.

{{{
mEngine = new Engine("Logfile.log");
SharedPtr<PackageFile> package(new PackageFile("Data.pak"));
mEngine->getResourceCache()->addPackageFile(package);
mEngine->init( ... )
}}}