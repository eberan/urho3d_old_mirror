$#include "Network.h"

class Network
{
    bool Connect(const String address, unsigned short port, Scene* scene, const VariantMap& identity = Variant::emptyVariantMap);
    
    void Disconnect(int waitMSec = 0);
    bool StartServer(unsigned short port);
    void StopServer();
    
    void BroadcastMessage(int msgID, bool reliable, bool inOrder, const VectorBuffer& msg, unsigned contentID = 0);

    void BroadcastRemoteEvent(StringHash eventType, bool inOrder, const VariantMap& eventData = Variant::emptyVariantMap);
    void BroadcastRemoteEvent(const String eventType, bool inOrder, const VariantMap& eventData = Variant::emptyVariantMap);
    
    void BroadcastRemoteEvent(Scene* scene, StringHash eventType, bool inOrder, const VariantMap& eventData = Variant::emptyVariantMap);
    void BroadcastRemoteEvent(Scene* scene, const String eventType, bool inOrder, const VariantMap& eventData = Variant::emptyVariantMap);
    
    void BroadcastRemoteEvent(Node* node, StringHash eventType, bool inOrder, const VariantMap& eventData = Variant::emptyVariantMap);
    void BroadcastRemoteEvent(Node* node, const String eventType, bool inOrder, const VariantMap& eventData = Variant::emptyVariantMap);
    
    void SetUpdateFps(int fps);
    
    void RegisterRemoteEvent(StringHash eventType);
    void RegisterRemoteEvent(const String eventType);
    
    void UnregisterRemoteEvent(StringHash eventType);
    void UnregisterRemoteEvent(const String eventType);
    
    void UnregisterAllRemoteEvents();
    void SetPackageCacheDir(const String path);
    
    int GetUpdateFps() const;
    Connection* GetServerConnection() const;
    
    bool IsServerRunning() const;
    
    bool CheckRemoteEvent(StringHash eventType) const;
    const String& GetPackageCacheDir() const;
    
    tolua_property__get_set int updateFps;
    tolua_readonly tolua_property__get_set Connection* serverConnection;
    tolua_readonly tolua_property__is_set bool serverRunning;
    tolua_property__get_set String& packageCacheDir;
};
