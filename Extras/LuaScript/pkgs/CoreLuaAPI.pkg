$#define TOLUA_RELEASE

$#include "LuaScript.h"

$pfile "Core/ProcessUtils.pkg"
$pfile "Core/StringUtils.pkg"
$pfile "Core/Variant.pkg"
$pfile "Core/Timer.pkg"

$using namespace Urho3D;
$#pragma warning(disable:4800)

${

const char* GetPlatformCString()
{
    static String platform = GetPlatform();
    return platform.CString();
}

Time* GetTime()
{
    return GetLuaScriptContext()->GetSubsystem<Time>();
}

const Variant& FindVariant(const VariantMap* vmap, const char* key)
{
    VariantMap::ConstIterator i = vmap->Find(ShortStringHash(key));
    return i != vmap->End() ? i->second_ : Variant::EMPTY;
}

int VariantMapGetInt(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetInt();
}

bool VariantMapGetBool(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetBool();
}

float VariantMapGetFloat(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetFloat();
}

const Vector2& VariantMapGetVector2(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetVector2();
}

const Vector3& VariantMapGetVector3(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetVector3();
}

const Vector4& VariantMapGetVector4(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetVector4();
}

const Quaternion& VariantMapGetQuaternion(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetQuaternion();
}

const Color& VariantMapGetColor(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetColor();
}

const String& VariantMapGetString(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetString();
}

const void* VariantMapGetPtr(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetPtr();
}

const ResourceRef& VariantMapGetResourceRef(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetResourceRef();
}

const ResourceRefList& VariantMapGetResourceRefList(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetResourceRefList();
}

const IntRect& VariantMapGetIntRect(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetIntRect();
}

const IntVector2& VariantMapGetIntVector2(const VariantMap* vmap, const char* key)
{
    return FindVariant(vmap, key).GetIntVector2();
}

void VariantMapSetInt(VariantMap* vmap, const char* key, int value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetBool(VariantMap* vmap, const char* key, bool value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetFloat(VariantMap* vmap, const char* key, float value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetVector2(VariantMap* vmap, const char* key, const Vector2& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetVector3(VariantMap* vmap, const char* key, const Vector3& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetVector4(VariantMap* vmap, const char* key, const Vector4& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetQuaternion(VariantMap* vmap, const char* key, const Quaternion& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetColor(VariantMap* vmap, const char* key, const Color& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetString(VariantMap* vmap, const char* key, const String& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetPtr(VariantMap* vmap, const char* key, void* value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetResourceRef(VariantMap* vmap, const char* key, const ResourceRef& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetResourceRefList(VariantMap* vmap, const char* key, const ResourceRefList& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetIntRect(VariantMap* vmap, const char* key, const IntRect& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

void VariantMapSetIntVector2(VariantMap* vmap, const char* key, const IntVector2& value)
{
    (*vmap)[ShortStringHash(key)] = value;
}

$}